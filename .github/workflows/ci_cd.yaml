name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Trigger the pipeline on any push to the master branch
  pull_request:
    branches:
      - master  # Trigger the pipeline on pull requests targeting the master branch

jobs:
  linting-formatting:
    name: Lint and Format Code  # Job to ensure code quality and formatting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']  # Test on Python versions 3.10, 3.11, and 3.12

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Action to pull the code from the repository

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}  # Each Python version is specified in the matrix

      - name: Install dependencies
        run: |
          python -m venv venv  # Create a virtual environment
          source venv/bin/activate
          pip install -r requirements.txt  # Install required packages

      - name: Run isort
        run: |
          source venv/bin/activate
          isort .  # Ensure imports are sorted according to the project style

      - name: Run black
        run: |
          source venv/bin/activate
          black .  # Ensure code formatting adheres to Black standards

      - name: Run pylint
        run: |
          source venv/bin/activate
          pylint $(git ls-files '*.py')  # Run pylint for code linting and quality checks

  deployment:
    name: Deploy API  # Deployment job to push the application to the cloud
    runs-on: ubuntu-latest
    needs: linting-formatting  # Ensures deployment only occurs if linting/formatting succeed
    strategy:
      matrix:
        python-version: ['3.10']  # Only deploy on one version, 3.10

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Pull the latest code changes

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}  # Use specified Python version for deployment

      - name: Install dependencies
        run: |
          python -m venv venv  # Create a virtual environment for deployment
          source venv/bin/activate
          pip install -r requirements.txt  # Install required packages

      - name: Deploy to Platform
        run: |
          echo "Deployment command here"  # Placeholder for the actual deployment command

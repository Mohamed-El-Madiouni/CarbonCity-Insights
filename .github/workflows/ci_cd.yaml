name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Trigger the pipeline on any push to the master branch
  pull_request:
    branches:
      - master  # Trigger the pipeline on pull requests targeting the master branch

jobs:
  linting-formatting:
    name: Lint and Format Code  # Job to ensure code quality and formatting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']  # Test on Python versions 3.10, 3.11, and 3.12

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Action to pull the code from the repository

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}  # Each Python version is specified in the matrix

      - name: Install dependencies
        run: |
          pip install -r requirements.txt  # Install required packages

      - name: Run isort
        run: |
          isort .  # Ensure imports are sorted according to the project style

      - name: Run black
        run: |
          black .  # Ensure code formatting adheres to Black standards

      - name: Run pylint
        run: |
           PYTHONPATH=. pylint $(git ls-files '*.py')  # Run pylint for code linting and quality checks

  unit-tests:
    name: Run Unit Tests  # Job to run unit tests with pytest
    runs-on: ubuntu-latest
    needs: linting-formatting  # Ensures tests run only if linting/formatting succeed
    strategy:
      matrix:
        python-version: [ '3.10', '3.11', '3.12' ]  # Run tests on multiple Python versions

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Pull the latest code changes

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip and install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Install required packages

      - name: Run pytest
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}  # Ensure DATABASE_URL is accessible to pytest
        run: |
          PYTHONPATH=. pytest  # Run unit tests with pytest

  deployment:
    name: Deploy API  # Deployment job to push the application to the cloud
    runs-on: ubuntu-latest
    needs: [linting-formatting, unit-tests]  # Ensures deployment only occurs if linting/formatting and tests succeed
    strategy:
      matrix:
        python-version: ['3.10']  # Only deploy on one version, 3.10

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Pull the latest code changes

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}  # Use specified Python version for deployment

      - name: Install dependencies
        run: |
          pip install -r requirements.txt  # Install required packages

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys
